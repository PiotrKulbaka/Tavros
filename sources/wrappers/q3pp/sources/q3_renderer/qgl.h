/*
===========================================================================
Copyright (C) 1999-2005 Id Software, Inc.

This file is part of Quake III Arena source code.

Quake III Arena source code is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the License,
or (at your option) any later version.

Quake III Arena source code is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
===========================================================================
*/
#pragma once

#include <windows.h>
#include <glad/glad.h>


#ifndef APIENTRY
    #define APIENTRY
#endif
#ifndef WINAPI
    #define WINAPI
#endif

#define QGLAPI extern

bool OpenGL_Init();
void OpenGL_Shutdown();

//===========================================================================

typedef void(APIENTRY* fn_glAccum_t)(GLenum op, GLfloat value);
QGLAPI fn_glAccum_t qglAccum;
typedef void(APIENTRY* fn_glAlphaFunc_t)(GLenum func, GLclampf ref);
QGLAPI fn_glAlphaFunc_t qglAlphaFunc;
typedef void(APIENTRY* fn_glArrayElement_t)(GLint i);
QGLAPI fn_glArrayElement_t qglArrayElement;
typedef void(APIENTRY* fn_glBegin_t)(GLenum mode);
QGLAPI fn_glBegin_t qglBegin;
typedef void(APIENTRY* fn_glBindTexture_t)(GLenum target, GLuint texture);
QGLAPI fn_glBindTexture_t qglBindTexture;
typedef void(APIENTRY* fn_glBitmap_t)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap);
QGLAPI fn_glBitmap_t qglBitmap;
typedef void(APIENTRY* fn_glBlendFunc_t)(GLenum sfactor, GLenum dfactor);
QGLAPI fn_glBlendFunc_t qglBlendFunc;
typedef void(APIENTRY* fn_glCallList_t)(GLuint list);
QGLAPI fn_glCallList_t qglCallList;
typedef void(APIENTRY* fn_glCallLists_t)(GLsizei n, GLenum type, const GLvoid* lists);
QGLAPI fn_glCallLists_t qglCallLists;
typedef void(APIENTRY* fn_glClear_t)(GLbitfield mask);
QGLAPI fn_glClear_t qglClear;
typedef void(APIENTRY* fn_glClearAccum_t)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
QGLAPI fn_glClearAccum_t qglClearAccum;
typedef void(APIENTRY* fn_glClearColor_t)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
QGLAPI fn_glClearColor_t qglClearColor;
typedef void(APIENTRY* fn_glClearDepth_t)(GLclampd depth);
QGLAPI fn_glClearDepth_t qglClearDepth;
typedef void(APIENTRY* fn_glClearIndex_t)(GLfloat c);
QGLAPI fn_glClearIndex_t qglClearIndex;
typedef void(APIENTRY* fn_glClearStencil_t)(GLint s);
QGLAPI fn_glClearStencil_t qglClearStencil;
typedef void(APIENTRY* fn_glClipPlane_t)(GLenum plane, const GLdouble* equation);
QGLAPI fn_glClipPlane_t qglClipPlane;
typedef void(APIENTRY* fn_glColor3b_t)(GLbyte red, GLbyte green, GLbyte blue);
QGLAPI fn_glColor3b_t qglColor3b;
typedef void(APIENTRY* fn_glColor3bv_t)(const GLbyte* v);
QGLAPI fn_glColor3bv_t qglColor3bv;
typedef void(APIENTRY* fn_glColor3d_t)(GLdouble red, GLdouble green, GLdouble blue);
QGLAPI fn_glColor3d_t qglColor3d;
typedef void(APIENTRY* fn_glColor3dv_t)(const GLdouble* v);
QGLAPI fn_glColor3dv_t qglColor3dv;
typedef void(APIENTRY* fn_glColor3f_t)(GLfloat red, GLfloat green, GLfloat blue);
QGLAPI fn_glColor3f_t qglColor3f;
typedef void(APIENTRY* fn_glColor3fv_t)(const GLfloat* v);
QGLAPI fn_glColor3fv_t qglColor3fv;
typedef void(APIENTRY* fn_glColor3i_t)(GLint red, GLint green, GLint blue);
QGLAPI fn_glColor3i_t qglColor3i;
typedef void(APIENTRY* fn_glColor3iv_t)(const GLint* v);
QGLAPI fn_glColor3iv_t qglColor3iv;
typedef void(APIENTRY* fn_glColor3s_t)(GLshort red, GLshort green, GLshort blue);
QGLAPI fn_glColor3s_t qglColor3s;
typedef void(APIENTRY* fn_glColor3sv_t)(const GLshort* v);
QGLAPI fn_glColor3sv_t qglColor3sv;
typedef void(APIENTRY* fn_glColor3ub_t)(GLubyte red, GLubyte green, GLubyte blue);
QGLAPI fn_glColor3ub_t qglColor3ub;
typedef void(APIENTRY* fn_glColor3ubv_t)(const GLubyte* v);
QGLAPI fn_glColor3ubv_t qglColor3ubv;
typedef void(APIENTRY* fn_glColor3ui_t)(GLuint red, GLuint green, GLuint blue);
QGLAPI fn_glColor3ui_t qglColor3ui;
typedef void(APIENTRY* fn_glColor3uiv_t)(const GLuint* v);
QGLAPI fn_glColor3uiv_t qglColor3uiv;
typedef void(APIENTRY* fn_glColor3us_t)(GLushort red, GLushort green, GLushort blue);
QGLAPI fn_glColor3us_t qglColor3us;
typedef void(APIENTRY* fn_glColor3usv_t)(const GLushort* v);
QGLAPI fn_glColor3usv_t qglColor3usv;
typedef void(APIENTRY* fn_glColor4b_t)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
QGLAPI fn_glColor4b_t qglColor4b;
typedef void(APIENTRY* fn_glColor4bv_t)(const GLbyte* v);
QGLAPI fn_glColor4bv_t qglColor4bv;
typedef void(APIENTRY* fn_glColor4d_t)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
QGLAPI fn_glColor4d_t qglColor4d;
typedef void(APIENTRY* fn_glColor4dv_t)(const GLdouble* v);
QGLAPI fn_glColor4dv_t qglColor4dv;
typedef void(APIENTRY* fn_glColor4f_t)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
QGLAPI fn_glColor4f_t qglColor4f;
typedef void(APIENTRY* fn_glColor4fv_t)(const GLfloat* v);
QGLAPI fn_glColor4fv_t qglColor4fv;
typedef void(APIENTRY* fn_glColor4i_t)(GLint red, GLint green, GLint blue, GLint alpha);
QGLAPI fn_glColor4i_t qglColor4i;
typedef void(APIENTRY* fn_glColor4iv_t)(const GLint* v);
QGLAPI fn_glColor4iv_t qglColor4iv;
typedef void(APIENTRY* fn_glColor4s_t)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
QGLAPI fn_glColor4s_t qglColor4s;
typedef void(APIENTRY* fn_glColor4sv_t)(const GLshort* v);
QGLAPI fn_glColor4sv_t qglColor4sv;
typedef void(APIENTRY* fn_glColor4ub_t)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
QGLAPI fn_glColor4ub_t qglColor4ub;
typedef void(APIENTRY* fn_glColor4ubv_t)(const GLubyte* v);
QGLAPI fn_glColor4ubv_t qglColor4ubv;
typedef void(APIENTRY* fn_glColor4ui_t)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
QGLAPI fn_glColor4ui_t qglColor4ui;
typedef void(APIENTRY* fn_glColor4uiv_t)(const GLuint* v);
QGLAPI fn_glColor4uiv_t qglColor4uiv;
typedef void(APIENTRY* fn_glColor4us_t)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
QGLAPI fn_glColor4us_t qglColor4us;
typedef void(APIENTRY* fn_glColor4usv_t)(const GLushort* v);
QGLAPI fn_glColor4usv_t qglColor4usv;
typedef void(APIENTRY* fn_glColorMask_t)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
QGLAPI fn_glColorMask_t qglColorMask;
typedef void(APIENTRY* fn_glColorMaterial_t)(GLenum face, GLenum mode);
QGLAPI fn_glColorMaterial_t qglColorMaterial;
typedef void(APIENTRY* fn_glColorPointer_t)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
QGLAPI fn_glColorPointer_t qglColorPointer;
typedef void(APIENTRY* fn_glCopyPixels_t)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
QGLAPI fn_glCopyPixels_t qglCopyPixels;
typedef void(APIENTRY* fn_glCopyTexImage1D_t)(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border);
QGLAPI fn_glCopyTexImage1D_t qglCopyTexImage1D;
typedef void(APIENTRY* fn_glCopyTexImage2D_t)(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
QGLAPI fn_glCopyTexImage2D_t qglCopyTexImage2D;
typedef void(APIENTRY* fn_glCopyTexSubImage1D_t)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
QGLAPI fn_glCopyTexSubImage1D_t qglCopyTexSubImage1D;
typedef void(APIENTRY* fn_glCopyTexSubImage2D_t)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
QGLAPI fn_glCopyTexSubImage2D_t qglCopyTexSubImage2D;
typedef void(APIENTRY* fn_glCullFace_t)(GLenum mode);
QGLAPI fn_glCullFace_t qglCullFace;
typedef void(APIENTRY* fn_glDeleteLists_t)(GLuint list, GLsizei range);
QGLAPI fn_glDeleteLists_t qglDeleteLists;
typedef void(APIENTRY* fn_glDeleteTextures_t)(GLsizei n, const GLuint* textures);
QGLAPI fn_glDeleteTextures_t qglDeleteTextures;
typedef void(APIENTRY* fn_glDepthFunc_t)(GLenum func);
QGLAPI fn_glDepthFunc_t qglDepthFunc;
typedef void(APIENTRY* fn_glDepthMask_t)(GLboolean flag);
QGLAPI fn_glDepthMask_t qglDepthMask;
typedef void(APIENTRY* fn_glDepthRange_t)(GLclampd zNear, GLclampd zFar);
QGLAPI fn_glDepthRange_t qglDepthRange;
typedef void(APIENTRY* fn_glDisable_t)(GLenum cap);
QGLAPI fn_glDisable_t qglDisable;
typedef void(APIENTRY* fn_glDisableClientState_t)(GLenum array);
QGLAPI fn_glDisableClientState_t qglDisableClientState;
typedef void(APIENTRY* fn_glDrawArrays_t)(GLenum mode, GLint first, GLsizei count);
QGLAPI fn_glDrawArrays_t qglDrawArrays;
typedef void(APIENTRY* fn_glDrawBuffer_t)(GLenum mode);
QGLAPI fn_glDrawBuffer_t qglDrawBuffer;
typedef void(APIENTRY* fn_glDrawElements_t)(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices);
QGLAPI fn_glDrawElements_t qglDrawElements;
typedef void(APIENTRY* fn_glDrawPixels_t)(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);
QGLAPI fn_glDrawPixels_t qglDrawPixels;
typedef void(APIENTRY* fn_glEdgeFlag_t)(GLboolean flag);
QGLAPI fn_glEdgeFlag_t qglEdgeFlag;
typedef void(APIENTRY* fn_glEdgeFlagPointer_t)(GLsizei stride, const GLvoid* pointer);
QGLAPI fn_glEdgeFlagPointer_t qglEdgeFlagPointer;
typedef void(APIENTRY* fn_glEdgeFlagv_t)(const GLboolean* flag);
QGLAPI fn_glEdgeFlagv_t qglEdgeFlagv;
typedef void(APIENTRY* fn_glEnable_t)(GLenum cap);
QGLAPI fn_glEnable_t qglEnable;
typedef void(APIENTRY* fn_glEnableClientState_t)(GLenum array);
QGLAPI fn_glEnableClientState_t qglEnableClientState;
typedef void(APIENTRY* fn_glEnd_t)();
QGLAPI fn_glEnd_t qglEnd;
typedef void(APIENTRY* fn_glEndList_t)();
QGLAPI fn_glEndList_t qglEndList;
typedef void(APIENTRY* fn_glEvalCoord1d_t)(GLdouble u);
QGLAPI fn_glEvalCoord1d_t qglEvalCoord1d;
typedef void(APIENTRY* fn_glEvalCoord1dv_t)(const GLdouble* u);
QGLAPI fn_glEvalCoord1dv_t qglEvalCoord1dv;
typedef void(APIENTRY* fn_glEvalCoord1f_t)(GLfloat u);
QGLAPI fn_glEvalCoord1f_t qglEvalCoord1f;
typedef void(APIENTRY* fn_glEvalCoord1fv_t)(const GLfloat* u);
QGLAPI fn_glEvalCoord1fv_t qglEvalCoord1fv;
typedef void(APIENTRY* fn_glEvalCoord2d_t)(GLdouble u, GLdouble v);
QGLAPI fn_glEvalCoord2d_t qglEvalCoord2d;
typedef void(APIENTRY* fn_glEvalCoord2dv_t)(const GLdouble* u);
QGLAPI fn_glEvalCoord2dv_t qglEvalCoord2dv;
typedef void(APIENTRY* fn_glEvalCoord2f_t)(GLfloat u, GLfloat v);
QGLAPI fn_glEvalCoord2f_t qglEvalCoord2f;
typedef void(APIENTRY* fn_glEvalCoord2fv_t)(const GLfloat* u);
QGLAPI fn_glEvalCoord2fv_t qglEvalCoord2fv;
typedef void(APIENTRY* fn_glEvalMesh1_t)(GLenum mode, GLint i1, GLint i2);
QGLAPI fn_glEvalMesh1_t qglEvalMesh1;
typedef void(APIENTRY* fn_glEvalMesh2_t)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
QGLAPI fn_glEvalMesh2_t qglEvalMesh2;
typedef void(APIENTRY* fn_glEvalPoint1_t)(GLint i);
QGLAPI fn_glEvalPoint1_t qglEvalPoint1;
typedef void(APIENTRY* fn_glEvalPoint2_t)(GLint i, GLint j);
QGLAPI fn_glEvalPoint2_t qglEvalPoint2;
typedef void(APIENTRY* fn_glFeedbackBuffer_t)(GLsizei size, GLenum type, GLfloat* buffer);
QGLAPI fn_glFeedbackBuffer_t qglFeedbackBuffer;
typedef void(APIENTRY* fn_glFinish_t)();
QGLAPI fn_glFinish_t qglFinish;
typedef void(APIENTRY* fn_glFlush_t)();
QGLAPI fn_glFlush_t qglFlush;
typedef void(APIENTRY* fn_glFogf_t)(GLenum pname, GLfloat param);
QGLAPI fn_glFogf_t qglFogf;
typedef void(APIENTRY* fn_glFogfv_t)(GLenum pname, const GLfloat* params);
QGLAPI fn_glFogfv_t qglFogfv;
typedef void(APIENTRY* fn_glFogi_t)(GLenum pname, GLint param);
QGLAPI fn_glFogi_t qglFogi;
typedef void(APIENTRY* fn_glFogiv_t)(GLenum pname, const GLint* params);
QGLAPI fn_glFogiv_t qglFogiv;
typedef void(APIENTRY* fn_glFrontFace_t)(GLenum mode);
QGLAPI fn_glFrontFace_t qglFrontFace;
typedef void(APIENTRY* fn_glFrustum_t)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
QGLAPI fn_glFrustum_t qglFrustum;
typedef void(APIENTRY* fn_glGenTextures_t)(GLsizei n, GLuint* textures);
QGLAPI fn_glGenTextures_t qglGenTextures;
typedef void(APIENTRY* fn_glGenerateMipmap_t)(GLenum target);
QGLAPI fn_glGenerateMipmap_t qglGenerateMipmap;
typedef void(APIENTRY* fn_glGetBooleanv_t)(GLenum pname, GLboolean* params);
QGLAPI fn_glGetBooleanv_t qglGetBooleanv;
typedef void(APIENTRY* fn_glGetClipPlane_t)(GLenum plane, GLdouble* equation);
QGLAPI fn_glGetClipPlane_t qglGetClipPlane;
typedef void(APIENTRY* fn_glGetDoublev_t)(GLenum pname, GLdouble* params);
QGLAPI fn_glGetDoublev_t qglGetDoublev;
typedef GLenum(APIENTRY* fn_glGetError_t)();
QGLAPI fn_glGetError_t qglGetError;
typedef void(APIENTRY* fn_glGetFloatv_t)(GLenum pname, GLfloat* params);
QGLAPI fn_glGetFloatv_t qglGetFloatv;
typedef void(APIENTRY* fn_glGetIntegerv_t)(GLenum pname, GLint* params);
QGLAPI fn_glGetIntegerv_t qglGetIntegerv;
typedef GLint(APIENTRY* fn_glGetInteger_t)(GLenum pname);
QGLAPI fn_glGetInteger_t qglGetInteger;
typedef void(APIENTRY* fn_glGetLightfv_t)(GLenum light, GLenum pname, GLfloat* params);
QGLAPI fn_glGetLightfv_t qglGetLightfv;
typedef void(APIENTRY* fn_glGetLightiv_t)(GLenum light, GLenum pname, GLint* params);
QGLAPI fn_glGetLightiv_t qglGetLightiv;
typedef void(APIENTRY* fn_glGetMapdv_t)(GLenum target, GLenum query, GLdouble* v);
QGLAPI fn_glGetMapdv_t qglGetMapdv;
typedef void(APIENTRY* fn_glGetMapfv_t)(GLenum target, GLenum query, GLfloat* v);
QGLAPI fn_glGetMapfv_t qglGetMapfv;
typedef void(APIENTRY* fn_glGetMapiv_t)(GLenum target, GLenum query, GLint* v);
QGLAPI fn_glGetMapiv_t qglGetMapiv;
typedef void(APIENTRY* fn_glGetMaterialfv_t)(GLenum face, GLenum pname, GLfloat* params);
QGLAPI fn_glGetMaterialfv_t qglGetMaterialfv;
typedef void(APIENTRY* fn_glGetMaterialiv_t)(GLenum face, GLenum pname, GLint* params);
QGLAPI fn_glGetMaterialiv_t qglGetMaterialiv;
typedef void(APIENTRY* fn_glGetPixelMapfv_t)(GLenum map, GLfloat* values);
QGLAPI fn_glGetPixelMapfv_t qglGetPixelMapfv;
typedef void(APIENTRY* fn_glGetPixelMapuiv_t)(GLenum map, GLuint* values);
QGLAPI fn_glGetPixelMapuiv_t qglGetPixelMapuiv;
typedef void(APIENTRY* fn_glGetPixelMapusv_t)(GLenum map, GLushort* values);
QGLAPI fn_glGetPixelMapusv_t qglGetPixelMapusv;
typedef void(APIENTRY* fn_glGetPointerv_t)(GLenum pname, GLvoid** params);
QGLAPI fn_glGetPointerv_t qglGetPointerv;
typedef void(APIENTRY* fn_glGetPolygonStipple_t)(GLubyte* mask);
QGLAPI fn_glGetPolygonStipple_t qglGetPolygonStipple;
typedef const GLubyte*(APIENTRY* fn_glGetString_t)(GLenum name);
QGLAPI fn_glGetString_t qglGetString;
typedef void(APIENTRY* fn_glGetTexEnvfv_t)(GLenum target, GLenum pname, GLfloat* params);
QGLAPI fn_glGetTexEnvfv_t qglGetTexEnvfv;
typedef void(APIENTRY* fn_glGetTexEnviv_t)(GLenum target, GLenum pname, GLint* params);
QGLAPI fn_glGetTexEnviv_t qglGetTexEnviv;
typedef void(APIENTRY* fn_glGetTexGendv_t)(GLenum coord, GLenum pname, GLdouble* params);
QGLAPI fn_glGetTexGendv_t qglGetTexGendv;
typedef void(APIENTRY* fn_glGetTexGenfv_t)(GLenum coord, GLenum pname, GLfloat* params);
QGLAPI fn_glGetTexGenfv_t qglGetTexGenfv;
typedef void(APIENTRY* fn_glGetTexGeniv_t)(GLenum coord, GLenum pname, GLint* params);
QGLAPI fn_glGetTexGeniv_t qglGetTexGeniv;
typedef void(APIENTRY* fn_glGetTexImage_t)(GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels);
QGLAPI fn_glGetTexImage_t qglGetTexImage;
typedef void(APIENTRY* fn_glGetTexLevelParameterfv_t)(GLenum target, GLint level, GLenum pname, GLfloat* params);
QGLAPI fn_glGetTexLevelParameterfv_t qglGetTexLevelParameterfv;
typedef void(APIENTRY* fn_glGetTexLevelParameteriv_t)(GLenum target, GLint level, GLenum pname, GLint* params);
QGLAPI fn_glGetTexLevelParameteriv_t qglGetTexLevelParameteriv;
typedef void(APIENTRY* fn_glGetTexParameterfv_t)(GLenum target, GLenum pname, GLfloat* params);
QGLAPI fn_glGetTexParameterfv_t qglGetTexParameterfv;
typedef void(APIENTRY* fn_glGetTexParameteriv_t)(GLenum target, GLenum pname, GLint* params);
QGLAPI fn_glGetTexParameteriv_t qglGetTexParameteriv;
typedef void(APIENTRY* fn_glHint_t)(GLenum target, GLenum mode);
QGLAPI fn_glHint_t qglHint;
typedef void(APIENTRY* fn_glIndexMask_t)(GLuint mask);
QGLAPI fn_glIndexMask_t qglIndexMask;
typedef void(APIENTRY* fn_glIndexPointer_t)(GLenum type, GLsizei stride, const GLvoid* pointer);
QGLAPI fn_glIndexPointer_t qglIndexPointer;
typedef void(APIENTRY* fn_glIndexd_t)(GLdouble c);
QGLAPI fn_glIndexd_t qglIndexd;
typedef void(APIENTRY* fn_glIndexdv_t)(const GLdouble* c);
QGLAPI fn_glIndexdv_t qglIndexdv;
typedef void(APIENTRY* fn_glIndexf_t)(GLfloat c);
QGLAPI fn_glIndexf_t qglIndexf;
typedef void(APIENTRY* fn_glIndexfv_t)(const GLfloat* c);
QGLAPI fn_glIndexfv_t qglIndexfv;
typedef void(APIENTRY* fn_glIndexi_t)(GLint c);
QGLAPI fn_glIndexi_t qglIndexi;
typedef void(APIENTRY* fn_glIndexiv_t)(const GLint* c);
QGLAPI fn_glIndexiv_t qglIndexiv;
typedef void(APIENTRY* fn_glIndexs_t)(GLshort c);
QGLAPI fn_glIndexs_t qglIndexs;
typedef void(APIENTRY* fn_glIndexsv_t)(const GLshort* c);
QGLAPI fn_glIndexsv_t qglIndexsv;
typedef void(APIENTRY* fn_glIndexub_t)(GLubyte c);
QGLAPI fn_glIndexub_t qglIndexub;
typedef void(APIENTRY* fn_glIndexubv_t)(const GLubyte* c);
QGLAPI fn_glIndexubv_t qglIndexubv;
typedef void(APIENTRY* fn_glInitNames_t)();
QGLAPI fn_glInitNames_t qglInitNames;
typedef void(APIENTRY* fn_glInterleavedArrays_t)(GLenum format, GLsizei stride, const GLvoid* pointer);
QGLAPI fn_glInterleavedArrays_t qglInterleavedArrays;
typedef GLboolean(APIENTRY* fn_glIsEnabled_t)(GLenum cap);
QGLAPI fn_glIsEnabled_t qglIsEnabled;
typedef GLboolean(APIENTRY* fn_glIsList_t)(GLuint list);
QGLAPI fn_glIsList_t qglIsList;
typedef GLboolean(APIENTRY* fn_glIsTexture_t)(GLuint texture);
QGLAPI fn_glIsTexture_t qglIsTexture;
typedef void(APIENTRY* fn_glLightModelf_t)(GLenum pname, GLfloat param);
QGLAPI fn_glLightModelf_t qglLightModelf;
typedef void(APIENTRY* fn_glLightModelfv_t)(GLenum pname, const GLfloat* params);
QGLAPI fn_glLightModelfv_t qglLightModelfv;
typedef void(APIENTRY* fn_glLightModeli_t)(GLenum pname, GLint param);
QGLAPI fn_glLightModeli_t qglLightModeli;
typedef void(APIENTRY* fn_glLightModeliv_t)(GLenum pname, const GLint* params);
QGLAPI fn_glLightModeliv_t qglLightModeliv;
typedef void(APIENTRY* fn_glLightf_t)(GLenum light, GLenum pname, GLfloat param);
QGLAPI fn_glLightf_t qglLightf;
typedef void(APIENTRY* fn_glLightfv_t)(GLenum light, GLenum pname, const GLfloat* params);
QGLAPI fn_glLightfv_t qglLightfv;
typedef void(APIENTRY* fn_glLighti_t)(GLenum light, GLenum pname, GLint param);
QGLAPI fn_glLighti_t qglLighti;
typedef void(APIENTRY* fn_glLightiv_t)(GLenum light, GLenum pname, const GLint* params);
QGLAPI fn_glLightiv_t qglLightiv;
typedef void(APIENTRY* fn_glLineStipple_t)(GLint factor, GLushort pattern);
QGLAPI fn_glLineStipple_t qglLineStipple;
typedef void(APIENTRY* fn_glLineWidth_t)(GLfloat width);
QGLAPI fn_glLineWidth_t qglLineWidth;
typedef void(APIENTRY* fn_glListBase_t)(GLuint base);
QGLAPI fn_glListBase_t qglListBase;
typedef void(APIENTRY* fn_glLoadIdentity_t)();
QGLAPI fn_glLoadIdentity_t qglLoadIdentity;
typedef void(APIENTRY* fn_glLoadMatrixd_t)(const GLdouble* m);
QGLAPI fn_glLoadMatrixd_t qglLoadMatrixd;
typedef void(APIENTRY* fn_glLoadMatrixf_t)(const GLfloat* m);
QGLAPI fn_glLoadMatrixf_t qglLoadMatrixf;
typedef void(APIENTRY* fn_glLoadName_t)(GLuint name);
QGLAPI fn_glLoadName_t qglLoadName;
typedef void(APIENTRY* fn_glLogicOp_t)(GLenum opcode);
QGLAPI fn_glLogicOp_t qglLogicOp;
typedef void(APIENTRY* fn_glMap1d_t)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
QGLAPI fn_glMap1d_t qglMap1d;
typedef void(APIENTRY* fn_glMap1f_t)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
QGLAPI fn_glMap1f_t qglMap1f;
typedef void(APIENTRY* fn_glMap2d_t)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
QGLAPI fn_glMap2d_t qglMap2d;
typedef void(APIENTRY* fn_glMap2f_t)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
QGLAPI fn_glMap2f_t qglMap2f;
typedef void(APIENTRY* fn_glMapGrid1d_t)(GLint un, GLdouble u1, GLdouble u2);
QGLAPI fn_glMapGrid1d_t qglMapGrid1d;
typedef void(APIENTRY* fn_glMapGrid1f_t)(GLint un, GLfloat u1, GLfloat u2);
QGLAPI fn_glMapGrid1f_t qglMapGrid1f;
typedef void(APIENTRY* fn_glMapGrid2d_t)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
QGLAPI fn_glMapGrid2d_t qglMapGrid2d;
typedef void(APIENTRY* fn_glMapGrid2f_t)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
QGLAPI fn_glMapGrid2f_t qglMapGrid2f;
typedef void(APIENTRY* fn_glMaterialf_t)(GLenum face, GLenum pname, GLfloat param);
QGLAPI fn_glMaterialf_t qglMaterialf;
typedef void(APIENTRY* fn_glMaterialfv_t)(GLenum face, GLenum pname, const GLfloat* params);
QGLAPI fn_glMaterialfv_t qglMaterialfv;
typedef void(APIENTRY* fn_glMateriali_t)(GLenum face, GLenum pname, GLint param);
QGLAPI fn_glMateriali_t qglMateriali;
typedef void(APIENTRY* fn_glMaterialiv_t)(GLenum face, GLenum pname, const GLint* params);
QGLAPI fn_glMaterialiv_t qglMaterialiv;
typedef void(APIENTRY* fn_glMatrixMode_t)(GLenum mode);
QGLAPI fn_glMatrixMode_t qglMatrixMode;
typedef void(APIENTRY* fn_glMultMatrixd_t)(const GLdouble* m);
QGLAPI fn_glMultMatrixd_t qglMultMatrixd;
typedef void(APIENTRY* fn_glMultMatrixf_t)(const GLfloat* m);
QGLAPI fn_glMultMatrixf_t qglMultMatrixf;
typedef void(APIENTRY* fn_glNewList_t)(GLuint list, GLenum mode);
QGLAPI fn_glNewList_t qglNewList;
typedef void(APIENTRY* fn_glNormal3b_t)(GLbyte nx, GLbyte ny, GLbyte nz);
QGLAPI fn_glNormal3b_t qglNormal3b;
typedef void(APIENTRY* fn_glNormal3bv_t)(const GLbyte* v);
QGLAPI fn_glNormal3bv_t qglNormal3bv;
typedef void(APIENTRY* fn_glNormal3d_t)(GLdouble nx, GLdouble ny, GLdouble nz);
QGLAPI fn_glNormal3d_t qglNormal3d;
typedef void(APIENTRY* fn_glNormal3dv_t)(const GLdouble* v);
QGLAPI fn_glNormal3dv_t qglNormal3dv;
typedef void(APIENTRY* fn_glNormal3f_t)(GLfloat nx, GLfloat ny, GLfloat nz);
QGLAPI fn_glNormal3f_t qglNormal3f;
typedef void(APIENTRY* fn_glNormal3fv_t)(const GLfloat* v);
QGLAPI fn_glNormal3fv_t qglNormal3fv;
typedef void(APIENTRY* fn_glNormal3i_t)(GLint nx, GLint ny, GLint nz);
QGLAPI fn_glNormal3i_t qglNormal3i;
typedef void(APIENTRY* fn_glNormal3iv_t)(const GLint* v);
QGLAPI fn_glNormal3iv_t qglNormal3iv;
typedef void(APIENTRY* fn_glNormal3s_t)(GLshort nx, GLshort ny, GLshort nz);
QGLAPI fn_glNormal3s_t qglNormal3s;
typedef void(APIENTRY* fn_glNormal3sv_t)(const GLshort* v);
QGLAPI fn_glNormal3sv_t qglNormal3sv;
typedef void(APIENTRY* fn_glNormalPointer_t)(GLenum type, GLsizei stride, const GLvoid* pointer);
QGLAPI fn_glNormalPointer_t qglNormalPointer;
typedef void(APIENTRY* fn_glOrtho_t)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
QGLAPI fn_glOrtho_t qglOrtho;
typedef void(APIENTRY* fn_glPassThrough_t)(GLfloat token);
QGLAPI fn_glPassThrough_t qglPassThrough;
typedef void(APIENTRY* fn_glPixelMapfv_t)(GLenum map, GLsizei mapsize, const GLfloat* values);
QGLAPI fn_glPixelMapfv_t qglPixelMapfv;
typedef void(APIENTRY* fn_glPixelMapuiv_t)(GLenum map, GLsizei mapsize, const GLuint* values);
QGLAPI fn_glPixelMapuiv_t qglPixelMapuiv;
typedef void(APIENTRY* fn_glPixelMapusv_t)(GLenum map, GLsizei mapsize, const GLushort* values);
QGLAPI fn_glPixelMapusv_t qglPixelMapusv;
typedef void(APIENTRY* fn_glPixelStoref_t)(GLenum pname, GLfloat param);
QGLAPI fn_glPixelStoref_t qglPixelStoref;
typedef void(APIENTRY* fn_glPixelStorei_t)(GLenum pname, GLint param);
QGLAPI fn_glPixelStorei_t qglPixelStorei;
typedef void(APIENTRY* fn_glPixelTransferf_t)(GLenum pname, GLfloat param);
QGLAPI fn_glPixelTransferf_t qglPixelTransferf;
typedef void(APIENTRY* fn_glPixelTransferi_t)(GLenum pname, GLint param);
QGLAPI fn_glPixelTransferi_t qglPixelTransferi;
typedef void(APIENTRY* fn_glPixelZoom_t)(GLfloat xfactor, GLfloat yfactor);
QGLAPI fn_glPixelZoom_t qglPixelZoom;
typedef void(APIENTRY* fn_glPointSize_t)(GLfloat size);
QGLAPI fn_glPointSize_t qglPointSize;
typedef void(APIENTRY* fn_glPolygonMode_t)(GLenum face, GLenum mode);
QGLAPI fn_glPolygonMode_t qglPolygonMode;
typedef void(APIENTRY* fn_glPolygonOffset_t)(GLfloat factor, GLfloat units);
QGLAPI fn_glPolygonOffset_t qglPolygonOffset;
typedef void(APIENTRY* fn_glPolygonStipple_t)(const GLubyte* mask);
QGLAPI fn_glPolygonStipple_t qglPolygonStipple;
typedef void(APIENTRY* fn_glPopAttrib_t)();
QGLAPI fn_glPopAttrib_t qglPopAttrib;
typedef void(APIENTRY* fn_glPopClientAttrib_t)();
QGLAPI fn_glPopClientAttrib_t qglPopClientAttrib;
typedef void(APIENTRY* fn_glPopMatrix_t)();
QGLAPI fn_glPopMatrix_t qglPopMatrix;
typedef void(APIENTRY* fn_glPopName_t)();
QGLAPI fn_glPopName_t qglPopName;
typedef void(APIENTRY* fn_glPrioritizeTextures_t)(GLsizei n, const GLuint* textures, const GLclampf* priorities);
QGLAPI fn_glPrioritizeTextures_t qglPrioritizeTextures;
typedef void(APIENTRY* fn_glPushAttrib_t)(GLbitfield mask);
QGLAPI fn_glPushAttrib_t qglPushAttrib;
typedef void(APIENTRY* fn_glPushClientAttrib_t)(GLbitfield mask);
QGLAPI fn_glPushClientAttrib_t qglPushClientAttrib;
typedef void(APIENTRY* fn_glPushMatrix_t)();
QGLAPI fn_glPushMatrix_t qglPushMatrix;
typedef void(APIENTRY* fn_glPushName_t)(GLuint name);
QGLAPI fn_glPushName_t qglPushName;
typedef void(APIENTRY* fn_glRasterPos2d_t)(GLdouble x, GLdouble y);
QGLAPI fn_glRasterPos2d_t qglRasterPos2d;
typedef void(APIENTRY* fn_glRasterPos2dv_t)(const GLdouble* v);
QGLAPI fn_glRasterPos2dv_t qglRasterPos2dv;
typedef void(APIENTRY* fn_glRasterPos2f_t)(GLfloat x, GLfloat y);
QGLAPI fn_glRasterPos2f_t qglRasterPos2f;
typedef void(APIENTRY* fn_glRasterPos2fv_t)(const GLfloat* v);
QGLAPI fn_glRasterPos2fv_t qglRasterPos2fv;
typedef void(APIENTRY* fn_glRasterPos2i_t)(GLint x, GLint y);
QGLAPI fn_glRasterPos2i_t qglRasterPos2i;
typedef void(APIENTRY* fn_glRasterPos2iv_t)(const GLint* v);
QGLAPI fn_glRasterPos2iv_t qglRasterPos2iv;
typedef void(APIENTRY* fn_glRasterPos2s_t)(GLshort x, GLshort y);
QGLAPI fn_glRasterPos2s_t qglRasterPos2s;
typedef void(APIENTRY* fn_glRasterPos2sv_t)(const GLshort* v);
QGLAPI fn_glRasterPos2sv_t qglRasterPos2sv;
typedef void(APIENTRY* fn_glRasterPos3d_t)(GLdouble x, GLdouble y, GLdouble z);
QGLAPI fn_glRasterPos3d_t qglRasterPos3d;
typedef void(APIENTRY* fn_glRasterPos3dv_t)(const GLdouble* v);
QGLAPI fn_glRasterPos3dv_t qglRasterPos3dv;
typedef void(APIENTRY* fn_glRasterPos3f_t)(GLfloat x, GLfloat y, GLfloat z);
QGLAPI fn_glRasterPos3f_t qglRasterPos3f;
typedef void(APIENTRY* fn_glRasterPos3fv_t)(const GLfloat* v);
QGLAPI fn_glRasterPos3fv_t qglRasterPos3fv;
typedef void(APIENTRY* fn_glRasterPos3i_t)(GLint x, GLint y, GLint z);
QGLAPI fn_glRasterPos3i_t qglRasterPos3i;
typedef void(APIENTRY* fn_glRasterPos3iv_t)(const GLint* v);
QGLAPI fn_glRasterPos3iv_t qglRasterPos3iv;
typedef void(APIENTRY* fn_glRasterPos3s_t)(GLshort x, GLshort y, GLshort z);
QGLAPI fn_glRasterPos3s_t qglRasterPos3s;
typedef void(APIENTRY* fn_glRasterPos3sv_t)(const GLshort* v);
QGLAPI fn_glRasterPos3sv_t qglRasterPos3sv;
typedef void(APIENTRY* fn_glRasterPos4d_t)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
QGLAPI fn_glRasterPos4d_t qglRasterPos4d;
typedef void(APIENTRY* fn_glRasterPos4dv_t)(const GLdouble* v);
QGLAPI fn_glRasterPos4dv_t qglRasterPos4dv;
typedef void(APIENTRY* fn_glRasterPos4f_t)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
QGLAPI fn_glRasterPos4f_t qglRasterPos4f;
typedef void(APIENTRY* fn_glRasterPos4fv_t)(const GLfloat* v);
QGLAPI fn_glRasterPos4fv_t qglRasterPos4fv;
typedef void(APIENTRY* fn_glRasterPos4i_t)(GLint x, GLint y, GLint z, GLint w);
QGLAPI fn_glRasterPos4i_t qglRasterPos4i;
typedef void(APIENTRY* fn_glRasterPos4iv_t)(const GLint* v);
QGLAPI fn_glRasterPos4iv_t qglRasterPos4iv;
typedef void(APIENTRY* fn_glRasterPos4s_t)(GLshort x, GLshort y, GLshort z, GLshort w);
QGLAPI fn_glRasterPos4s_t qglRasterPos4s;
typedef void(APIENTRY* fn_glRasterPos4sv_t)(const GLshort* v);
QGLAPI fn_glRasterPos4sv_t qglRasterPos4sv;
typedef void(APIENTRY* fn_glReadBuffer_t)(GLenum mode);
QGLAPI fn_glReadBuffer_t qglReadBuffer;
typedef void(APIENTRY* fn_glReadPixels_t)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
QGLAPI fn_glReadPixels_t qglReadPixels;
typedef void(APIENTRY* fn_glRectd_t)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
QGLAPI fn_glRectd_t qglRectd;
typedef void(APIENTRY* fn_glRectdv_t)(const GLdouble* v1, const GLdouble* v2);
QGLAPI fn_glRectdv_t qglRectdv;
typedef void(APIENTRY* fn_glRectf_t)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
QGLAPI fn_glRectf_t qglRectf;
typedef void(APIENTRY* fn_glRectfv_t)(const GLfloat* v1, const GLfloat* v2);
QGLAPI fn_glRectfv_t qglRectfv;
typedef void(APIENTRY* fn_glRecti_t)(GLint x1, GLint y1, GLint x2, GLint y2);
QGLAPI fn_glRecti_t qglRecti;
typedef void(APIENTRY* fn_glRectiv_t)(const GLint* v1, const GLint* v2);
QGLAPI fn_glRectiv_t qglRectiv;
typedef void(APIENTRY* fn_glRects_t)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
QGLAPI fn_glRects_t qglRects;
typedef void(APIENTRY* fn_glRectsv_t)(const GLshort* v1, const GLshort* v2);
QGLAPI fn_glRectsv_t qglRectsv;
typedef GLint(APIENTRY* fn_glRenderMode_t)(GLenum mode);
QGLAPI fn_glRenderMode_t qglRenderMode;
typedef void(APIENTRY* fn_glRotated_t)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
QGLAPI fn_glRotated_t qglRotated;
typedef void(APIENTRY* fn_glRotatef_t)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
QGLAPI fn_glRotatef_t qglRotatef;
typedef void(APIENTRY* fn_glScaled_t)(GLdouble x, GLdouble y, GLdouble z);
QGLAPI fn_glScaled_t qglScaled;
typedef void(APIENTRY* fn_glScalef_t)(GLfloat x, GLfloat y, GLfloat z);
QGLAPI fn_glScalef_t qglScalef;
typedef void(APIENTRY* fn_glScissor_t)(GLint x, GLint y, GLsizei width, GLsizei height);
QGLAPI fn_glScissor_t qglScissor;
typedef void(APIENTRY* fn_glSelectBuffer_t)(GLsizei size, GLuint* buffer);
QGLAPI fn_glSelectBuffer_t qglSelectBuffer;
typedef void(APIENTRY* fn_glShadeModel_t)(GLenum mode);
QGLAPI fn_glShadeModel_t qglShadeModel;
typedef void(APIENTRY* fn_glStencilFunc_t)(GLenum func, GLint ref, GLuint mask);
QGLAPI fn_glStencilFunc_t qglStencilFunc;
typedef void(APIENTRY* fn_glStencilMask_t)(GLuint mask);
QGLAPI fn_glStencilMask_t qglStencilMask;
typedef void(APIENTRY* fn_glStencilOp_t)(GLenum fail, GLenum zfail, GLenum zpass);
QGLAPI fn_glStencilOp_t qglStencilOp;
typedef void(APIENTRY* fn_glTexCoord1d_t)(GLdouble s);
QGLAPI fn_glTexCoord1d_t qglTexCoord1d;
typedef void(APIENTRY* fn_glTexCoord1dv_t)(const GLdouble* v);
QGLAPI fn_glTexCoord1dv_t qglTexCoord1dv;
typedef void(APIENTRY* fn_glTexCoord1f_t)(GLfloat s);
QGLAPI fn_glTexCoord1f_t qglTexCoord1f;
typedef void(APIENTRY* fn_glTexCoord1fv_t)(const GLfloat* v);
QGLAPI fn_glTexCoord1fv_t qglTexCoord1fv;
typedef void(APIENTRY* fn_glTexCoord1i_t)(GLint s);
QGLAPI fn_glTexCoord1i_t qglTexCoord1i;
typedef void(APIENTRY* fn_glTexCoord1iv_t)(const GLint* v);
QGLAPI fn_glTexCoord1iv_t qglTexCoord1iv;
typedef void(APIENTRY* fn_glTexCoord1s_t)(GLshort s);
QGLAPI fn_glTexCoord1s_t qglTexCoord1s;
typedef void(APIENTRY* fn_glTexCoord1sv_t)(const GLshort* v);
QGLAPI fn_glTexCoord1sv_t qglTexCoord1sv;
typedef void(APIENTRY* fn_glTexCoord2d_t)(GLdouble s, GLdouble t);
QGLAPI fn_glTexCoord2d_t qglTexCoord2d;
typedef void(APIENTRY* fn_glTexCoord2dv_t)(const GLdouble* v);
QGLAPI fn_glTexCoord2dv_t qglTexCoord2dv;
typedef void(APIENTRY* fn_glTexCoord2f_t)(GLfloat s, GLfloat t);
QGLAPI fn_glTexCoord2f_t qglTexCoord2f;
typedef void(APIENTRY* fn_glTexCoord2fv_t)(const GLfloat* v);
QGLAPI fn_glTexCoord2fv_t qglTexCoord2fv;
typedef void(APIENTRY* fn_glTexCoord2i_t)(GLint s, GLint t);
QGLAPI fn_glTexCoord2i_t qglTexCoord2i;
typedef void(APIENTRY* fn_glTexCoord2iv_t)(const GLint* v);
QGLAPI fn_glTexCoord2iv_t qglTexCoord2iv;
typedef void(APIENTRY* fn_glTexCoord2s_t)(GLshort s, GLshort t);
QGLAPI fn_glTexCoord2s_t qglTexCoord2s;
typedef void(APIENTRY* fn_glTexCoord2sv_t)(const GLshort* v);
QGLAPI fn_glTexCoord2sv_t qglTexCoord2sv;
typedef void(APIENTRY* fn_glTexCoord3d_t)(GLdouble s, GLdouble t, GLdouble r);
QGLAPI fn_glTexCoord3d_t qglTexCoord3d;
typedef void(APIENTRY* fn_glTexCoord3dv_t)(const GLdouble* v);
QGLAPI fn_glTexCoord3dv_t qglTexCoord3dv;
typedef void(APIENTRY* fn_glTexCoord3f_t)(GLfloat s, GLfloat t, GLfloat r);
QGLAPI fn_glTexCoord3f_t qglTexCoord3f;
typedef void(APIENTRY* fn_glTexCoord3fv_t)(const GLfloat* v);
QGLAPI fn_glTexCoord3fv_t qglTexCoord3fv;
typedef void(APIENTRY* fn_glTexCoord3i_t)(GLint s, GLint t, GLint r);
QGLAPI fn_glTexCoord3i_t qglTexCoord3i;
typedef void(APIENTRY* fn_glTexCoord3iv_t)(const GLint* v);
QGLAPI fn_glTexCoord3iv_t qglTexCoord3iv;
typedef void(APIENTRY* fn_glTexCoord3s_t)(GLshort s, GLshort t, GLshort r);
QGLAPI fn_glTexCoord3s_t qglTexCoord3s;
typedef void(APIENTRY* fn_glTexCoord3sv_t)(const GLshort* v);
QGLAPI fn_glTexCoord3sv_t qglTexCoord3sv;
typedef void(APIENTRY* fn_glTexCoord4d_t)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
QGLAPI fn_glTexCoord4d_t qglTexCoord4d;
typedef void(APIENTRY* fn_glTexCoord4dv_t)(const GLdouble* v);
QGLAPI fn_glTexCoord4dv_t qglTexCoord4dv;
typedef void(APIENTRY* fn_glTexCoord4f_t)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
QGLAPI fn_glTexCoord4f_t qglTexCoord4f;
typedef void(APIENTRY* fn_glTexCoord4fv_t)(const GLfloat* v);
QGLAPI fn_glTexCoord4fv_t qglTexCoord4fv;
typedef void(APIENTRY* fn_glTexCoord4i_t)(GLint s, GLint t, GLint r, GLint q);
QGLAPI fn_glTexCoord4i_t qglTexCoord4i;
typedef void(APIENTRY* fn_glTexCoord4iv_t)(const GLint* v);
QGLAPI fn_glTexCoord4iv_t qglTexCoord4iv;
typedef void(APIENTRY* fn_glTexCoord4s_t)(GLshort s, GLshort t, GLshort r, GLshort q);
QGLAPI fn_glTexCoord4s_t qglTexCoord4s;
typedef void(APIENTRY* fn_glTexCoord4sv_t)(const GLshort* v);
QGLAPI fn_glTexCoord4sv_t qglTexCoord4sv;
typedef void(APIENTRY* fn_glTexCoordPointer_t)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
QGLAPI fn_glTexCoordPointer_t qglTexCoordPointer;
typedef void(APIENTRY* fn_glTexEnvf_t)(GLenum target, GLenum pname, GLfloat param);
QGLAPI fn_glTexEnvf_t qglTexEnvf;
typedef void(APIENTRY* fn_glTexEnvfv_t)(GLenum target, GLenum pname, const GLfloat* params);
QGLAPI fn_glTexEnvfv_t qglTexEnvfv;
typedef void(APIENTRY* fn_glTexEnvi_t)(GLenum target, GLenum pname, GLint param);
QGLAPI fn_glTexEnvi_t qglTexEnvi;
typedef void(APIENTRY* fn_glTexEnviv_t)(GLenum target, GLenum pname, const GLint* params);
QGLAPI fn_glTexEnviv_t qglTexEnviv;
typedef void(APIENTRY* fn_glTexGend_t)(GLenum coord, GLenum pname, GLdouble param);
QGLAPI fn_glTexGend_t qglTexGend;
typedef void(APIENTRY* fn_glTexGendv_t)(GLenum coord, GLenum pname, const GLdouble* params);
QGLAPI fn_glTexGendv_t qglTexGendv;
typedef void(APIENTRY* fn_glTexGenf_t)(GLenum coord, GLenum pname, GLfloat param);
QGLAPI fn_glTexGenf_t qglTexGenf;
typedef void(APIENTRY* fn_glTexGenfv_t)(GLenum coord, GLenum pname, const GLfloat* params);
QGLAPI fn_glTexGenfv_t qglTexGenfv;
typedef void(APIENTRY* fn_glTexGeni_t)(GLenum coord, GLenum pname, GLint param);
QGLAPI fn_glTexGeni_t qglTexGeni;
typedef void(APIENTRY* fn_glTexGeniv_t)(GLenum coord, GLenum pname, const GLint* params);
QGLAPI fn_glTexGeniv_t qglTexGeniv;
typedef void(APIENTRY* fn_glTexImage1D_t)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
QGLAPI fn_glTexImage1D_t qglTexImage1D;
typedef void(APIENTRY* fn_glTexImage2D_t)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels);
QGLAPI fn_glTexImage2D_t qglTexImage2D;
typedef void(APIENTRY* fn_glTexParameterf_t)(GLenum target, GLenum pname, GLfloat param);
QGLAPI fn_glTexParameterf_t qglTexParameterf;
typedef void(APIENTRY* fn_glTexParameterfv_t)(GLenum target, GLenum pname, const GLfloat* params);
QGLAPI fn_glTexParameterfv_t qglTexParameterfv;
typedef void(APIENTRY* fn_glTexParameteri_t)(GLenum target, GLenum pname, GLint param);
QGLAPI fn_glTexParameteri_t qglTexParameteri;
typedef void(APIENTRY* fn_glTexParameteriv_t)(GLenum target, GLenum pname, const GLint* params);
QGLAPI fn_glTexParameteriv_t qglTexParameteriv;
typedef void(APIENTRY* fn_glTexSubImage1D_t)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels);
QGLAPI fn_glTexSubImage1D_t qglTexSubImage1D;
typedef void(APIENTRY* fn_glTexSubImage2D_t)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels);
QGLAPI fn_glTexSubImage2D_t qglTexSubImage2D;
typedef void(APIENTRY* fn_glTranslated_t)(GLdouble x, GLdouble y, GLdouble z);
QGLAPI fn_glTranslated_t qglTranslated;
typedef void(APIENTRY* fn_glTranslatef_t)(GLfloat x, GLfloat y, GLfloat z);
QGLAPI fn_glTranslatef_t qglTranslatef;
typedef void(APIENTRY* fn_glVertex2d_t)(GLdouble x, GLdouble y);
QGLAPI fn_glVertex2d_t qglVertex2d;
typedef void(APIENTRY* fn_glVertex2dv_t)(const GLdouble* v);
QGLAPI fn_glVertex2dv_t qglVertex2dv;
typedef void(APIENTRY* fn_glVertex2f_t)(GLfloat x, GLfloat y);
QGLAPI fn_glVertex2f_t qglVertex2f;
typedef void(APIENTRY* fn_glVertex2fv_t)(const GLfloat* v);
QGLAPI fn_glVertex2fv_t qglVertex2fv;
typedef void(APIENTRY* fn_glVertex2i_t)(GLint x, GLint y);
QGLAPI fn_glVertex2i_t qglVertex2i;
typedef void(APIENTRY* fn_glVertex2iv_t)(const GLint* v);
QGLAPI fn_glVertex2iv_t qglVertex2iv;
typedef void(APIENTRY* fn_glVertex2s_t)(GLshort x, GLshort y);
QGLAPI fn_glVertex2s_t qglVertex2s;
typedef void(APIENTRY* fn_glVertex2sv_t)(const GLshort* v);
QGLAPI fn_glVertex2sv_t qglVertex2sv;
typedef void(APIENTRY* fn_glVertex3d_t)(GLdouble x, GLdouble y, GLdouble z);
QGLAPI fn_glVertex3d_t qglVertex3d;
typedef void(APIENTRY* fn_glVertex3dv_t)(const GLdouble* v);
QGLAPI fn_glVertex3dv_t qglVertex3dv;
typedef void(APIENTRY* fn_glVertex3f_t)(GLfloat x, GLfloat y, GLfloat z);
QGLAPI fn_glVertex3f_t qglVertex3f;
typedef void(APIENTRY* fn_glVertex3fv_t)(const GLfloat* v);
QGLAPI fn_glVertex3fv_t qglVertex3fv;
typedef void(APIENTRY* fn_glVertex3i_t)(GLint x, GLint y, GLint z);
QGLAPI fn_glVertex3i_t qglVertex3i;
typedef void(APIENTRY* fn_glVertex3iv_t)(const GLint* v);
QGLAPI fn_glVertex3iv_t qglVertex3iv;
typedef void(APIENTRY* fn_glVertex3s_t)(GLshort x, GLshort y, GLshort z);
QGLAPI fn_glVertex3s_t qglVertex3s;
typedef void(APIENTRY* fn_glVertex3sv_t)(const GLshort* v);
QGLAPI fn_glVertex3sv_t qglVertex3sv;
typedef void(APIENTRY* fn_glVertex4d_t)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
QGLAPI fn_glVertex4d_t qglVertex4d;
typedef void(APIENTRY* fn_glVertex4dv_t)(const GLdouble* v);
QGLAPI fn_glVertex4dv_t qglVertex4dv;
typedef void(APIENTRY* fn_glVertex4f_t)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
QGLAPI fn_glVertex4f_t qglVertex4f;
typedef void(APIENTRY* fn_glVertex4fv_t)(const GLfloat* v);
QGLAPI fn_glVertex4fv_t qglVertex4fv;
typedef void(APIENTRY* fn_glVertex4i_t)(GLint x, GLint y, GLint z, GLint w);
QGLAPI fn_glVertex4i_t qglVertex4i;
typedef void(APIENTRY* fn_glVertex4iv_t)(const GLint* v);
QGLAPI fn_glVertex4iv_t qglVertex4iv;
typedef void(APIENTRY* fn_glVertex4s_t)(GLshort x, GLshort y, GLshort z, GLshort w);
QGLAPI fn_glVertex4s_t qglVertex4s;
typedef void(APIENTRY* fn_glVertex4sv_t)(const GLshort* v);
QGLAPI fn_glVertex4sv_t qglVertex4sv;
typedef void(APIENTRY* fn_glVertexPointer_t)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
QGLAPI fn_glVertexPointer_t qglVertexPointer;
typedef void(APIENTRY* fn_glViewport_t)(GLint x, GLint y, GLsizei width, GLsizei height);
QGLAPI fn_glViewport_t qglViewport;

#undef QGLAPI
